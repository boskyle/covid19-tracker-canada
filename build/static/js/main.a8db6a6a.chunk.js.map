{"version":3,"sources":["components/Super/classes/ProvinceInformation.js","components/Super/components/ProvinceLeaderboard.js","components/Super/Super.js","App.js","index.js"],"names":["ProvinceInformation","province","prevProvince","date","getProvinceCode","getFormattedDate","curDate","option","last7","Date","moment","format","setDate","getDate","getFormattedDateDisplay","this","_province","_prevProvince","_date","Array","isArray","cur_date","a","loc","getCovid","covidInfo","additionalData","map","x","short","provInfo","myDate","displayDate","baseUrl","fetch","response","data","json","resp","PR_CODES","promises","i","length","console","log","push","Promise","all","ProvinceLeaderboard","props","state","updatedLeaderboard","listItems","leaderboard","prevProps","prevState","table","sty","index","className","name","board","option_one","cases_sum","Component","Super","handleChange","e","target","value","setState","handleProvinceChange","goToYesterday","today","yesterday","information","cases","cumulative_cases","date_report","retDate","bind","getLeaderboard","then","promiseArray","responseObject","values","provArray","dataObject","sort","b","getData","undefined","foo2","Object","is","sum","obj","style","overflow","backgroundColor","FormControl","component","FormGroup","FormLabel","NativeSelect","onChange","inputProps","RadioGroup","defaultValue","FormControlLabel","control","Radio","color","label","utils","MomentUtils","DatePicker","variant","newVal","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8db6a6a.chunk.js","sourcesContent":["import moment from 'moment';\n\n\nclass ProvinceInformation {\n    constructor (province,prevProvince,date) {\n        this._province = province;\n        this._prevProvince = prevProvince;\n        this._date = date;\n    }\n\n\n\n\ngetProvinceCode = (province) => {\n    switch (province){\n        case 'alberta': return 'AB';\n        case 'british-columbia': return 'BC';\n        case 'manitoba': return 'MB';\n        case 'new-brunswick': return 'NB';\n        case 'new-foundland-and-labrador': return 'NL';\n        case 'northwest-territories': return 'NT';\n        case 'nunavut': return 'NU';\n        case 'nova-scotia': return 'NS';\n        case 'ontario': return 'ON';\n        case 'pei': return 'PE';\n        case 'quebec': return 'QC';\n        case 'saskatchewan': return 'SK';\n        case 'yukon': return 'YT';\n        default: return 'RP';\n    }\n}\n\n\n\n// this format is used for the api fetch\ngetFormattedDate = (curDate,option) => {\n  \n\n\n\n    let last7 = new Date(curDate);\n    switch (option) {\n        case 'daily': return moment(curDate).format('DD-MM-YYYY');\n        case 'weekly': last7.setDate(last7.getDate() -7); return [moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];\n        case 'monthly': last7.setDate(last7.getDate() -30); return [moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];\n        default: return curDate;\n    }\n    \n}\n// this format is used for display purposes \ngetFormattedDateDisplay =(curDate,option) => {\n    let last7 = new Date(curDate);\n    switch (option) {\n        case 'daily': return moment(curDate).format('MMM Do YYYY');\n        case 'weekly': last7.setDate(last7.getDate() -7); return [moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];\n        case 'monthly': last7.setDate(last7.getDate() -30); return [moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];\n        default: return curDate;\n    }\n\n}\n\ndisplayDate(date) {\n   if(Array.isArray(date)) {\n        return `${date[1]} to ${date[0]}`;\n    }\n        return date;\n}\n\n\n\n\nasync getData(province,cur_date,option) {\n    // transform input to formatted to be inserted to async fetch\nlet loc = this.getProvinceCode(province);\nlet date = this.getFormattedDate(cur_date,option);\nlet covidInfo; \nlet provArray;\ncovidInfo = await this.getCovid(loc,date,option);\nprovArray = await this.additionalData();\n\n\nlet provInfo;\nprovArray.map(x => {if (x.short === loc) {provInfo = x;}})\n\nvar myDate = '';\nmyDate = this.displayDate(this.getFormattedDateDisplay(cur_date,option));\n\n\nreturn {covidInfo,provInfo,myDate};\n}\n\n\n async getCovid(loc,date) {\n    //  if I have range\n    let baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&date=${date}`;\n    if(Array.isArray(date)) {\n        baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&before=${date[0]}&after=${date[1]}`\n    }\n    let response = await fetch(baseUrl);\n    let data = response.json();\n    return data;\n }\n async additionalData() {\n    let baseUrl = 'https://raw.githubusercontent.com/Clavicus/Testing-Requests/master/canadian-provinces.json';\n    const resp = await fetch (baseUrl);\n    const data = resp.json();\n    return data;\n}\n async getLeaderboard(cur_date,option) {\n    var date = this.getFormattedDate(cur_date,option);\n    // console.log(date);\n    var PR_CODES=['AB','BC','MB','NB','NL','NT','NU','NS','ON','PE','QC','SK','YT'];\n    var baseUrl='';\n    let promises = [];\n    // iterate through all the provinces and territories\n    for (let i =0; i<PR_CODES.length; i++) {\n\n        // if date is single (no range)\n        if (!Array.isArray(date)) {\n          \n            baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&date=${date}`;\n            \n      \n        }else if (Array.isArray(date)){\n            baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&before=${date[0]}&after=${date[1]}`;\n        } else {console.log(\"DATE INVALID\")}\n\n         promises.push(fetch(baseUrl));\n    }\n    \n    return Promise.all(promises);\n\n   \n}\n\n}\n\nexport default ProvinceInformation;\n\n\n\n\n\n\n\n","import {Component} from 'react';\nimport './provinceLeaderboard.css';\n\nclass ProvinceLeaderboard  extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            updatedLeaderboard : [],\n            listItems: <li>Empty</li>\n        }\n\n    }\n\n\n    \n\n\n    static getDerivedStateFromProps(props,state) {\n        return {updatedLeaderboard : props.leaderboard};\n    }\n\n    componentDidMount() {\n        console.log(\"ProvinceLeaderboard mounted..\");\n        console.log(this.props.leaderboard);\n    }\n\n    \n    componentDidUpdate(prevProps,prevState) {\n        \n      \n\n    }\n \n\n    render() {  \n        console.table(this.state.updatedLeaderboard);\n        return (\n            <>\n                <h4 sty>Leaderboard</h4>\n                {this.state.updatedLeaderboard.map((data,index) => (\n                    <div className=\"province-item card m-1\">\n                        <p className=\"m-0\">{index+1}. {data.name}</p>\n                <small className=\"m-0\"><strong>{this.props.board.option_one} cases:  {data.cases_sum}</strong></small>\n                    </div>\n                ))}\n            </>\n        );\n    }\n}\n\n\nexport default ProvinceLeaderboard;","import {Component} from 'react';\nimport './super.css';\nimport {FormControl,FormLabel,FormGroup,FormControlLabel,RadioGroup,Radio,NativeSelect} from '@material-ui/core';\nimport MomentUtils from '@date-io/moment';\nimport {MuiPickersUtilsProvider,DatePicker} from \"@material-ui/pickers\";\nimport ProvinceInformation from './classes/ProvinceInformation';\nimport ProvinceLeaderboard from './components/ProvinceLeaderboard';\nimport moment from 'moment';\nclass Super extends Component {\n   \n\n    constructor(props) {\n        super(props);\n        this.state = {\n            board:  {    option_one: 'daily',\n                         province:'alberta',\n                         date:this.goToYesterday(new Date())\n                },\n            information: {\n                covidInfo : {\n                    cases: 'not avaiable yet...',\n                    cumulative_cases: 'not avaiable yet...',\n                    date_report: 'not avaiable yet...',\n                    province: 'not avaiable yet...'\n                },\n                provInfo: ''   ,\n                retDate: '',\n            },\n            leaderboard:[],\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleProvinceChange = this.handleProvinceChange.bind(this);\n     \n\n    }\n    \n    handleChange = e => {\n        let board = {...this.state.board};\n        board.option_one = e.target.value;\n        this.setState({board});\n    }\n    handleProvinceChange = e => {\n        // const name = e.target.name;     \n        let board = {...this.state.board};\n        board.province =  e.target.value;\n        this.setState({board});\n    }\n\n    goToYesterday = (today) => {\n\n        let yesterday = new Date(today);\n        yesterday.setDate(yesterday.getDate() - 1);\n        return yesterday;\n    }\n\n \n    componentWillMount() {\n        console.log('i will be invoked before render');\n        let foo2 = new ProvinceInformation();\n    \n        foo2.getLeaderboard(this.state.board.date,this.state.board.option_one).then(response => {\n   \n            /*\n            x is an array of responses to be fetched..\n            pipe the response to be json object so I can extract data..\n            */          \n           let leaderboard = {...this.state.leaderboard};\n           var promiseArray = [];\n\n         \n            // an array of responses\n           response.map((responseObject,index) => {\n                //  push all the promises to an array and then consume it using promise.all  \n               promiseArray.push(responseObject.json());\n              \n            }) // end of response.map\n            Promise.all(promiseArray).then((values) => {\n                // values is an object array (based of all territories/provinces ON daily,weekly, and monthly)\n                // each object element will contain an array of cases based ON daily, weekly, and monthly\n                \n                // array of data objects depending on daily. weekly and mponthly\n           var provArray = values.map(dataObject => {\n                            let cases_sum = 0;\n                            let name = '';\n                            dataObject.cases.map(data => {\n                                cases_sum+=data.cases;\n                                name=data.province;\n                            })\n                            return ({name,cases_sum});\n                    })\n                provArray.sort((a,b) => b.cases_sum - a.cases_sum).map((data,index) => {\n                    console.table(index+1,data);\n                });\n\n                leaderboard = provArray;\n                this.setState({leaderboard});\n            })\n  \n    }); \n\n    }\n    componentDidMount() {\n        console.log('Super mounted.');\n\n        // have a onMount date format for render visual \n        \n        let foo2 = new ProvinceInformation();\n        foo2.getData(this.state.board.province,this.state.board.date,this.state.board.option_one).then((data) => {\n            let {covidInfo,provInfo,myDate} = data;\n                let information = {...this.state.information};\n\n                if (covidInfo.cases[0] !== undefined) {\n                    information.covidInfo = covidInfo.cases[0];\n               \n                }\n                information.provInfo = provInfo;\n                information.retDate = myDate;\n                this.setState({information});\n\n                // get initial date format    \n        });\n\n        // get leaderboard.. first mount\n    }\n\n    componentWillUnmount() {\n        console.log('Super unmounted.');\n    }\n\n    componentDidUpdate(prevProps,prevState) { \n        console.log('Super updated.');\n\n\n        let foo2 = new ProvinceInformation();\n        foo2.getData(this.state.board.province,this.state.board.date,this.state.board.option_one).then((data) => {\n         \n            // if prev state board not the same as current\n            // => no changes are occuring unless there is!\n            if(!Object.is(prevState.board,this.state.board)) {\n                let {covidInfo,provInfo,myDate} = data;\n                let information = {...this.state.information};\n                \n                if (covidInfo.cases[0] !== undefined) {\n                    information.covidInfo = covidInfo.cases[0];\n                    /*map through array of cases if weekly / monthly then sum it up*/\n                    if (this.state.board.option_one === \"weekly\" || this.state.board.option_one === \"monthly\") {\n                        let sum = 0;\n                        covidInfo.cases.map(obj => {\n                            sum += obj.cases;\n                        })\n                        information.covidInfo.cases = sum;\n                        console.log(sum);\n                    }\n                } else {\n                    information.covidInfo.cases = \n                    information.covidInfo.cumulative_cases = \n                    information.covidInfo.date_report =\n                    information.covidInfo.province = \"not avaiable yet...\";\n                }\n                information.provInfo = provInfo;\n                information.retDate = myDate;\n                this.setState({information});         \n            }\n        });\n       \n\n\n        foo2.getLeaderboard(this.state.board.date,this.state.board.option_one).then(response => {\n\n            if(!Object.is(prevState.board,this.state.board)) {\n                /*\n                x is an array of responses to be fetched..\n                pipe the response to be json object so I can extract data..\n                */          \n       \n               let leaderboard = {...this.state.leaderboard};\n               var promiseArray = [];\n\n             \n                // an array of responses\n               response.map((responseObject,index) => {\n                    //  push all the promises to an array and then consume it using promise.all  \n                   promiseArray.push(responseObject.json());\n                  \n                }) // end of response.map\n                Promise.all(promiseArray).then((values) => {\n                    // values is an object array (based of all territories/provinces ON daily,weekly, and monthly)\n                    // each object element will contain an array of cases based ON daily, weekly, and monthly\n                    \n                    // array of data objects depending on daily. weekly and mponthly\n               var provArray = values.map(dataObject => {\n                                let cases_sum = 0;\n                                let name = '';\n                                dataObject.cases.map(data => {\n                                    cases_sum+=data.cases;\n                                    name=data.province;\n                                })\n                                return ({name,cases_sum});\n                        })\n                    provArray.sort((a,b) => b.cases_sum - a.cases_sum).map((data,index) => {\n                        // console.table(index+1,data);\n                    });\n\n                    leaderboard = provArray;\n                    this.setState({leaderboard});\n                })\n      \n          \n    \n            }\n        }); \n    }\n\n    render() {\n        \n  \n        return (\n            <div className=\"mainContainer containerFluid\">\n            {/* <Navigation/> */}\n                <div className=\"row no-gutters h-100\" style={{overflow: 'auto'}}>\n\n                    <div className=\"col-0  col-xl-3 d-flex flex-column align-items-center justify-content-center first-column p-5\">\n                        <div className=\"dashboard  w-100 h-75 card\" style={{backgroundColor:'#6C8AD7'}}>\n                        <h2 className=\"mt-5 text-center\">Control Board</h2>\n\n\n                        <FormControl component=\"fieldset\">\n                            <FormGroup className=\"mt-5\">\n                            <FormLabel component=\"legend\">Province/Territory</FormLabel>\n                                <NativeSelect\n                                value={this.state.board.province}\n                                onChange={this.handleProvinceChange}        \n                                inputProps={{name: 'province'}}\n                                >\n                                <option value=\"alberta\">Alberta</option>\n                                <option value=\"british-columbia\">British Columbia</option>\n                                <option value=\"manitoba\">Manitoba</option>\n                                <option value=\"new-brunswick\">New Brunswick</option>\n                                <option value=\"new-foundland-and-labrador\">Newfoundland and Labrador</option>\n                                <option value=\"northwest-territories\">Northwest Territories</option>\n                                <option value=\"nova-scotia\">Nova Scotia</option>\n                                <option value=\"nunavut\">Nunavut</option>\n                                <option value=\"ontario\">Ontario</option>\n                                <option value=\"pei\">Prince Edward Island</option>\n                                <option value=\"quebec\">Quebec</option>\n                                <option value=\"saskatchewan\">Saskatchewan</option>\n                                <option value=\"yukon\">Yukon</option>\n                                </NativeSelect>\n                            </FormGroup>\n                          \n                            <FormGroup className=\"mt-5 p-1\">\n                                <FormLabel component=\"legend\">Option</FormLabel>\n                                    <RadioGroup defaultValue=\"daily\" value={this.state.option_one} onChange={this.handleChange} className=\"w-100 d-flex flex-row justify-content-center\">\n                                        <FormControlLabel  value=\"daily\" control={<Radio color=\"primary\" />} label=\"Daily\" />\n                                        <FormControlLabel  value=\"weekly\" control={<Radio color=\"primary\" />} label=\"Weekly\" />\n                                        <FormControlLabel  value=\"monthly\" control={<Radio color=\"primary\" />} label=\"Monthly\" />\n                                    </RadioGroup>\n                            </FormGroup>\n\n\n                            <FormGroup className=\"p-1\">\n\n                                {/* <Typography id=\"discrete-slider\" gutterBottom>\n                                Month \n                                </Typography>\n                                <Slider\n                                    className=\"mx-auto w-75\"\n                                    defaultValue={1}\n                                    aria-labelledby=\"discrete-slider\"\n                                    valueLabelDisplay=\"auto\"\n                                    step={1}\n                                    min={1}\n                                    max={12}\n                                /> */}\n                              \n                              <MuiPickersUtilsProvider utils={MomentUtils}>\n                                <DatePicker\n                                variant=\"inline\"\n                                label=\"Date\"\n                                value={this.state.board.date}\n                                onChange={(newVal) => {\n                                    let board = {...this.state.board};\n                                    board.date = moment(newVal).format('YYYY-MM-DD');\n                                    this.setState({board});\n                                }}/>\n                              </MuiPickersUtilsProvider>\n                         \n                  \n                            </FormGroup>\n\n\n\n                        </FormControl>\n                     \n                        \n                   \n                       \n                        </div>\n                    </div>\n                    <div className=\"col-12 col-xl-9  d-flex flex-column align-items-center justify-content-center second-column\">\n                      \n                        {/* <h2 className=\"bg-info card p-1 text-center\">CANADA COVID19 TRACKER</h2> */}\n                        <div className=\"mapContainer d-flex flex-column align-items-center card mb-2\" style={{backgroundColor:'#6C8AD7'}}>\n\n                            <div className=\"row no-gutters h-100 w-100 p-3\">\n                                <div className=\"col-md-3 d-flex flex-column align-items-center\">\n                                    <div className=\"h-100 w-100 card leaderboardWrapper text-center d-flex flex-column align-items-center\">\n                                        <ProvinceLeaderboard\n                                        board={this.state.board}\n                                        leaderboard={this.state.leaderboard}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"col-md-9 p-3 d-flex flex-column  align-items-center justify-content-center\">\n\n                                    <div className=\"p-5 text-center card covidWrapper\">\n                                    <h1 className=\"display\">{this.state.information.provInfo.name}</h1>\n                                    <h2>{this.state.information.retDate}</h2>\n                                    <h2>{this.state.board.option_one} cases:  {this.state.information.covidInfo.cases}</h2>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                        \n                            \n                      \n                        {/* MAP */}      \n                        </div>\n                  \n                        \n                    </div>\n\n                    {/* <div className=\"col-xl-2 p-2 d-flex flex-column align-items-center justify-content-start\">\n                   \n                   \n                        <div className=\"leaderboard h-100 w-100 d-flex flex-column align-items-center\" style={{backgroundColor:'#6C8AD7'}}><h2>leaderboard highest to lowest</h2></div>\n                       \n                    </div>                                  */}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Super;\n","import './App.css';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Super from './components/Super/Super';\nimport './assets/fonts/index.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>       \n          <Route path='/' component={Super}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}