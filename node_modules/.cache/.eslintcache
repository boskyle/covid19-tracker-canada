[{"/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/index.js":"1","/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/App.js":"2","/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/components/Super/Super.js":"3","/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/components/Super/classes/ProvinceInformation.js":"4","/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/components/Super/components/ProvinceLeaderboard.js":"5"},{"size":178,"mtime":1644243505100,"results":"6","hashOfConfig":"7"},{"size":387,"mtime":1644243505096,"results":"8","hashOfConfig":"7"},{"size":15254,"mtime":1644243505100,"results":"9","hashOfConfig":"7"},{"size":4122,"mtime":1644243505100,"results":"10","hashOfConfig":"7"},{"size":1196,"mtime":1644243505100,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6o05ov",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/index.js",[],"/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/App.js",[],"/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/components/Super/Super.js",["24","25","26","27","28","29","30"],"import {Component} from 'react';\nimport './super.css';\nimport {FormControl,FormLabel,FormGroup,FormControlLabel,RadioGroup,Radio,NativeSelect} from '@material-ui/core';\nimport MomentUtils from '@date-io/moment';\nimport {MuiPickersUtilsProvider,DatePicker} from \"@material-ui/pickers\";\nimport ProvinceInformation from './classes/ProvinceInformation';\nimport ProvinceLeaderboard from './components/ProvinceLeaderboard';\nimport moment from 'moment';\nclass Super extends Component {\n   \n\n    constructor(props) {\n        super(props);\n        this.state = {\n            board:  {    option_one: 'daily',\n                         province:'alberta',\n                         date:this.goToYesterday(new Date())\n                },\n            information: {\n                covidInfo : {\n                    cases: 'not avaiable yet...',\n                    cumulative_cases: 'not avaiable yet...',\n                    date_report: 'not avaiable yet...',\n                    province: 'not avaiable yet...'\n                },\n                provInfo: ''   ,\n                retDate: '',\n            },\n            leaderboard:[],\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleProvinceChange = this.handleProvinceChange.bind(this);\n     \n\n    }\n    \n    handleChange = e => {\n        let board = {...this.state.board};\n        board.option_one = e.target.value;\n        this.setState({board});\n    }\n    handleProvinceChange = e => {\n        // const name = e.target.name;     \n        let board = {...this.state.board};\n        board.province =  e.target.value;\n        this.setState({board});\n    }\n\n    goToYesterday = (today) => {\n\n        let yesterday = new Date(today);\n        yesterday.setDate(yesterday.getDate() - 1);\n        return yesterday;\n    }\n\n \n    componentWillMount() {\n        console.log('i will be invoked before render');\n        let foo2 = new ProvinceInformation();\n    \n        foo2.getLeaderboard(this.state.board.date,this.state.board.option_one).then(response => {\n   \n            /*\n            x is an array of responses to be fetched..\n            pipe the response to be json object so I can extract data..\n            */          \n           let leaderboard = {...this.state.leaderboard};\n           var promiseArray = [];\n\n         \n            // an array of responses\n           response.map((responseObject,index) => {\n                //  push all the promises to an array and then consume it using promise.all  \n               promiseArray.push(responseObject.json());\n              \n            }) // end of response.map\n            Promise.all(promiseArray).then((values) => {\n                // values is an object array (based of all territories/provinces ON daily,weekly, and monthly)\n                // each object element will contain an array of cases based ON daily, weekly, and monthly\n                \n                // array of data objects depending on daily. weekly and mponthly\n           var provArray = values.map(dataObject => {\n                            let cases_sum = 0;\n                            let name = '';\n                            dataObject.cases.map(data => {\n                                cases_sum+=data.cases;\n                                name=data.province;\n                            })\n                            return ({name,cases_sum});\n                    })\n                provArray.sort((a,b) => b.cases_sum - a.cases_sum).map((data,index) => {\n                    console.table(index+1,data);\n                });\n\n                leaderboard = provArray;\n                this.setState({leaderboard});\n            })\n  \n    }); \n\n    }\n    componentDidMount() {\n        console.log('Super mounted.');\n\n        // have a onMount date format for render visual \n        \n        let foo2 = new ProvinceInformation();\n        foo2.getData(this.state.board.province,this.state.board.date,this.state.board.option_one).then((data) => {\n            let {covidInfo,provInfo,myDate} = data;\n                let information = {...this.state.information};\n\n                if (covidInfo.cases[0] !== undefined) {\n                    information.covidInfo = covidInfo.cases[0];\n               \n                }\n                information.provInfo = provInfo;\n                information.retDate = myDate;\n                this.setState({information});\n\n                // get initial date format    \n        });\n\n        // get leaderboard.. first mount\n    }\n\n    componentWillUnmount() {\n        console.log('Super unmounted.');\n    }\n\n    componentDidUpdate(prevProps,prevState) { \n        console.log('Super updated.');\n\n\n        let foo2 = new ProvinceInformation();\n        foo2.getData(this.state.board.province,this.state.board.date,this.state.board.option_one).then((data) => {\n         \n            // if prev state board not the same as current\n            // => no changes are occuring unless there is!\n            if(!Object.is(prevState.board,this.state.board)) {\n                let {covidInfo,provInfo,myDate} = data;\n                let information = {...this.state.information};\n                \n                if (covidInfo.cases[0] !== undefined) {\n                    information.covidInfo = covidInfo.cases[0];\n                    /*map through array of cases if weekly / monthly then sum it up*/\n                    if (this.state.board.option_one === \"weekly\" || this.state.board.option_one === \"monthly\") {\n                        let sum = 0;\n                        covidInfo.cases.map(obj => {\n                            sum += obj.cases;\n                        })\n                        information.covidInfo.cases = sum;\n                        console.log(sum);\n                    }\n                } else {\n                    information.covidInfo.cases = \n                    information.covidInfo.cumulative_cases = \n                    information.covidInfo.date_report =\n                    information.covidInfo.province = \"not avaiable yet...\";\n                }\n                information.provInfo = provInfo;\n                information.retDate = myDate;\n                this.setState({information});         \n            }\n        });\n       \n\n\n        foo2.getLeaderboard(this.state.board.date,this.state.board.option_one).then(response => {\n\n            if(!Object.is(prevState.board,this.state.board)) {\n                /*\n                x is an array of responses to be fetched..\n                pipe the response to be json object so I can extract data..\n                */          \n       \n               let leaderboard = {...this.state.leaderboard};\n               var promiseArray = [];\n\n             \n                // an array of responses\n               response.map((responseObject,index) => {\n                    //  push all the promises to an array and then consume it using promise.all  \n                   promiseArray.push(responseObject.json());\n                  \n                }) // end of response.map\n                Promise.all(promiseArray).then((values) => {\n                    // values is an object array (based of all territories/provinces ON daily,weekly, and monthly)\n                    // each object element will contain an array of cases based ON daily, weekly, and monthly\n                    \n                    // array of data objects depending on daily. weekly and mponthly\n               var provArray = values.map(dataObject => {\n                                let cases_sum = 0;\n                                let name = '';\n                                dataObject.cases.map(data => {\n                                    cases_sum+=data.cases;\n                                    name=data.province;\n                                })\n                                return ({name,cases_sum});\n                        })\n                    provArray.sort((a,b) => b.cases_sum - a.cases_sum).map((data,index) => {\n                        // console.table(index+1,data);\n                    });\n\n                    leaderboard = provArray;\n                    this.setState({leaderboard});\n                })\n      \n          \n    \n            }\n        }); \n    }\n\n    render() {\n        \n  \n        return (\n            <div className=\"mainContainer containerFluid\">\n            {/* <Navigation/> */}\n                <div className=\"row no-gutters h-100\" style={{overflow: 'auto'}}>\n\n                    <div className=\"col-0  col-xl-3 d-flex flex-column align-items-center justify-content-center first-column p-5\">\n                        <div className=\"dashboard  w-100 h-75 card\" style={{backgroundColor:'#6C8AD7'}}>\n                        <h2 className=\"mt-5 text-center\">Control Board</h2>\n\n\n                        <FormControl component=\"fieldset\">\n                            <FormGroup className=\"mt-5\">\n                            <FormLabel component=\"legend\">Province/Territory</FormLabel>\n                                <NativeSelect\n                                value={this.state.board.province}\n                                onChange={this.handleProvinceChange}        \n                                inputProps={{name: 'province'}}\n                                >\n                                <option value=\"alberta\">Alberta</option>\n                                <option value=\"british-columbia\">British Columbia</option>\n                                <option value=\"manitoba\">Manitoba</option>\n                                <option value=\"new-brunswick\">New Brunswick</option>\n                                <option value=\"new-foundland-and-labrador\">Newfoundland and Labrador</option>\n                                <option value=\"northwest-territories\">Northwest Territories</option>\n                                <option value=\"nova-scotia\">Nova Scotia</option>\n                                <option value=\"nunavut\">Nunavut</option>\n                                <option value=\"ontario\">Ontario</option>\n                                <option value=\"pei\">Prince Edward Island</option>\n                                <option value=\"quebec\">Quebec</option>\n                                <option value=\"saskatchewan\">Saskatchewan</option>\n                                <option value=\"yukon\">Yukon</option>\n                                </NativeSelect>\n                            </FormGroup>\n                          \n                            <FormGroup className=\"mt-5 p-1\">\n                                <FormLabel component=\"legend\">Option</FormLabel>\n                                    <RadioGroup defaultValue=\"daily\" value={this.state.option_one} onChange={this.handleChange} className=\"w-100 d-flex flex-row justify-content-center\">\n                                        <FormControlLabel  value=\"daily\" control={<Radio color=\"primary\" />} label=\"Daily\" />\n                                        <FormControlLabel  value=\"weekly\" control={<Radio color=\"primary\" />} label=\"Weekly\" />\n                                        <FormControlLabel  value=\"monthly\" control={<Radio color=\"primary\" />} label=\"Monthly\" />\n                                    </RadioGroup>\n                            </FormGroup>\n\n\n                            <FormGroup className=\"p-1\">\n\n                                {/* <Typography id=\"discrete-slider\" gutterBottom>\n                                Month \n                                </Typography>\n                                <Slider\n                                    className=\"mx-auto w-75\"\n                                    defaultValue={1}\n                                    aria-labelledby=\"discrete-slider\"\n                                    valueLabelDisplay=\"auto\"\n                                    step={1}\n                                    min={1}\n                                    max={12}\n                                /> */}\n                              \n                              <MuiPickersUtilsProvider utils={MomentUtils}>\n                                <DatePicker\n                                variant=\"inline\"\n                                label=\"Date\"\n                                value={this.state.board.date}\n                                onChange={(newVal) => {\n                                    let board = {...this.state.board};\n                                    board.date = moment(newVal).format('YYYY-MM-DD');\n                                    this.setState({board});\n                                }}/>\n                              </MuiPickersUtilsProvider>\n                         \n                  \n                            </FormGroup>\n\n\n\n                        </FormControl>\n                     \n                        \n                   \n                       \n                        </div>\n                    </div>\n                    <div className=\"col-12 col-xl-9  d-flex flex-column align-items-center justify-content-center second-column\">\n                      \n                        {/* <h2 className=\"bg-info card p-1 text-center\">CANADA COVID19 TRACKER</h2> */}\n                        <div className=\"mapContainer d-flex flex-column align-items-center card mb-2\" style={{backgroundColor:'#6C8AD7'}}>\n\n                            <div className=\"row no-gutters h-100 w-100 p-3\">\n                                <div className=\"col-md-3 d-flex flex-column align-items-center\">\n                                    <div className=\"h-100 w-100 card leaderboardWrapper text-center d-flex flex-column align-items-center\">\n                                        <ProvinceLeaderboard\n                                        board={this.state.board}\n                                        leaderboard={this.state.leaderboard}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"col-md-9 p-3 d-flex flex-column  align-items-center justify-content-center\">\n\n                                    <div className=\"p-5 text-center card covidWrapper\">\n                                    <h1 className=\"display\">{this.state.information.provInfo.name}</h1>\n                                    <h2>{this.state.information.retDate}</h2>\n                                    <h2>{this.state.board.option_one} cases:  {this.state.information.covidInfo.cases}</h2>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                        \n                            \n                      \n                        {/* MAP */}      \n                        </div>\n                  \n                        \n                    </div>\n\n                    {/* <div className=\"col-xl-2 p-2 d-flex flex-column align-items-center justify-content-start\">\n                   \n                   \n                        <div className=\"leaderboard h-100 w-100 d-flex flex-column align-items-center\" style={{backgroundColor:'#6C8AD7'}}><h2>leaderboard highest to lowest</h2></div>\n                       \n                    </div>                                  */}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Super;\n","/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/components/Super/classes/ProvinceInformation.js",["31"],"import moment from 'moment';\n\n\nclass ProvinceInformation {\n    constructor (province,prevProvince,date) {\n        this._province = province;\n        this._prevProvince = prevProvince;\n        this._date = date;\n    }\n\n\n\n\ngetProvinceCode = (province) => {\n    switch (province){\n        case 'alberta': return 'AB';\n        case 'british-columbia': return 'BC';\n        case 'manitoba': return 'MB';\n        case 'new-brunswick': return 'NB';\n        case 'new-foundland-and-labrador': return 'NL';\n        case 'northwest-territories': return 'NT';\n        case 'nunavut': return 'NU';\n        case 'nova-scotia': return 'NS';\n        case 'ontario': return 'ON';\n        case 'pei': return 'PE';\n        case 'quebec': return 'QC';\n        case 'saskatchewan': return 'SK';\n        case 'yukon': return 'YT';\n        default: return 'RP';\n    }\n}\n\n\n\n// this format is used for the api fetch\ngetFormattedDate = (curDate,option) => {\n  \n\n\n\n    let last7 = new Date(curDate);\n    switch (option) {\n        case 'daily': return moment(curDate).format('DD-MM-YYYY');\n        case 'weekly': last7.setDate(last7.getDate() -7); return [moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];\n        case 'monthly': last7.setDate(last7.getDate() -30); return [moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];\n        default: return curDate;\n    }\n    \n}\n// this format is used for display purposes \ngetFormattedDateDisplay =(curDate,option) => {\n    let last7 = new Date(curDate);\n    switch (option) {\n        case 'daily': return moment(curDate).format('MMM Do YYYY');\n        case 'weekly': last7.setDate(last7.getDate() -7); return [moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];\n        case 'monthly': last7.setDate(last7.getDate() -30); return [moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];\n        default: return curDate;\n    }\n\n}\n\ndisplayDate(date) {\n   if(Array.isArray(date)) {\n        return `${date[1]} to ${date[0]}`;\n    }\n        return date;\n}\n\n\n\n\nasync getData(province,cur_date,option) {\n    // transform input to formatted to be inserted to async fetch\nlet loc = this.getProvinceCode(province);\nlet date = this.getFormattedDate(cur_date,option);\nlet covidInfo; \nlet provArray;\ncovidInfo = await this.getCovid(loc,date,option);\nprovArray = await this.additionalData();\n\n\nlet provInfo;\nprovArray.map(x => {if (x.short === loc) {provInfo = x;}})\n\nvar myDate = '';\nmyDate = this.displayDate(this.getFormattedDateDisplay(cur_date,option));\n\n\nreturn {covidInfo,provInfo,myDate};\n}\n\n\n async getCovid(loc,date) {\n    //  if I have range\n    let baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&date=${date}`;\n    if(Array.isArray(date)) {\n        baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&before=${date[0]}&after=${date[1]}`\n    }\n    let response = await fetch(baseUrl);\n    let data = response.json();\n    return data;\n }\n async additionalData() {\n    let baseUrl = 'https://raw.githubusercontent.com/Clavicus/Testing-Requests/master/canadian-provinces.json';\n    const resp = await fetch (baseUrl);\n    const data = resp.json();\n    return data;\n}\n async getLeaderboard(cur_date,option) {\n    var date = this.getFormattedDate(cur_date,option);\n    // console.log(date);\n    var PR_CODES=['AB','BC','MB','NB','NL','NT','NU','NS','ON','PE','QC','SK','YT'];\n    var baseUrl='';\n    let promises = [];\n    // iterate through all the provinces and territories\n    for (let i =0; i<PR_CODES.length; i++) {\n\n        // if date is single (no range)\n        if (!Array.isArray(date)) {\n          \n            baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&date=${date}`;\n            \n      \n        }else if (Array.isArray(date)){\n            baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&before=${date[0]}&after=${date[1]}`;\n        } else {console.log(\"DATE INVALID\")}\n\n         promises.push(fetch(baseUrl));\n    }\n    \n    return Promise.all(promises);\n\n   \n}\n\n}\n\nexport default ProvinceInformation;\n\n\n\n\n\n\n\n","/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/components/Super/components/ProvinceLeaderboard.js",[],{"ruleId":"32","severity":1,"message":"33","line":73,"column":48,"nodeType":"34","messageId":"35","endLine":73,"endColumn":50},{"ruleId":"32","severity":1,"message":"33","line":86,"column":55,"nodeType":"34","messageId":"35","endLine":86,"endColumn":57},{"ruleId":"32","severity":1,"message":"33","line":92,"column":85,"nodeType":"34","messageId":"35","endLine":92,"endColumn":87},{"ruleId":"32","severity":1,"message":"33","line":149,"column":49,"nodeType":"34","messageId":"35","endLine":149,"endColumn":51},{"ruleId":"32","severity":1,"message":"33","line":182,"column":52,"nodeType":"34","messageId":"35","endLine":182,"endColumn":54},{"ruleId":"32","severity":1,"message":"33","line":195,"column":59,"nodeType":"34","messageId":"35","endLine":195,"endColumn":61},{"ruleId":"32","severity":1,"message":"33","line":201,"column":89,"nodeType":"34","messageId":"35","endLine":201,"endColumn":91},{"ruleId":"32","severity":1,"message":"33","line":83,"column":17,"nodeType":"34","messageId":"35","endLine":83,"endColumn":19},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]