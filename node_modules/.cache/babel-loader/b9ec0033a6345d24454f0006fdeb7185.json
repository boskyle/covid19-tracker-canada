{"ast":null,"code":"import _asyncToGenerator from\"/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _regeneratorRuntime from\"/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/node_modules/@babel/runtime/regenerator/index.js\";import moment from'moment';var ProvinceInformation=/*#__PURE__*/function(){function ProvinceInformation(_province,prevProvince,date){_classCallCheck(this,ProvinceInformation);this.getProvinceCode=function(province){switch(province){case'alberta':return'AB';case'british-columbia':return'BC';case'manitoba':return'MB';case'new-brunswick':return'NB';case'new-foundland-and-labrador':return'NL';case'northwest-territories':return'NT';case'nunavut':return'NU';case'nova-scotia':return'NS';case'ontario':return'ON';case'pei':return'PE';case'quebec':return'QC';case'saskatchewan':return'SK';case'yukon':return'YT';default:return'RP';}};this.getFormattedDate=function(curDate,option){var last7=new Date(curDate);switch(option){case'daily':return moment(curDate).format('DD-MM-YYYY');case'weekly':last7.setDate(last7.getDate()-7);return[moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];case'monthly':last7.setDate(last7.getDate()-30);return[moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];default:return curDate;}};this.getFormattedDateDisplay=function(curDate,option){var last7=new Date(curDate);switch(option){case'daily':return moment(curDate).format('MMM Do YYYY');case'weekly':last7.setDate(last7.getDate()-7);return[moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];case'monthly':last7.setDate(last7.getDate()-30);return[moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];default:return curDate;}};this._province=_province;this._prevProvince=prevProvince;this._date=date;}_createClass(ProvinceInformation,[{key:\"displayDate\",value:function displayDate(date){if(Array.isArray(date)){return\"\".concat(date[1],\" to \").concat(date[0]);}return date;}},{key:\"getData\",value:function(){var _getData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(province,cur_date,option){var loc,date,covidInfo,provArray,provInfo,myDate;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// transform input to formatted to be inserted to async fetch\nloc=this.getProvinceCode(province);date=this.getFormattedDate(cur_date,option);_context.next=4;return this.getCovid(loc,date,option);case 4:covidInfo=_context.sent;_context.next=7;return this.additionalData();case 7:provArray=_context.sent;provArray.map(function(x){if(x.short===loc){provInfo=x;}});myDate='';myDate=this.displayDate(this.getFormattedDateDisplay(cur_date,option));return _context.abrupt(\"return\",{covidInfo:covidInfo,provInfo:provInfo,myDate:myDate});case 12:case\"end\":return _context.stop();}}},_callee,this);}));function getData(_x,_x2,_x3){return _getData.apply(this,arguments);}return getData;}()},{key:\"getCovid\",value:function(){var _getCovid=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(loc,date){var baseUrl,response,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0://  if I have range\nbaseUrl=\"https://api.opencovid.ca/timeseries?stat=cases&loc=\".concat(loc,\"&date=\").concat(date);if(Array.isArray(date)){baseUrl=\"https://api.opencovid.ca/timeseries?stat=cases&loc=\".concat(loc,\"&before=\").concat(date[0],\"&after=\").concat(date[1]);}_context2.next=4;return fetch(baseUrl);case 4:response=_context2.sent;data=response.json();return _context2.abrupt(\"return\",data);case 7:case\"end\":return _context2.stop();}}},_callee2);}));function getCovid(_x4,_x5){return _getCovid.apply(this,arguments);}return getCovid;}()},{key:\"additionalData\",value:function(){var _additionalData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var baseUrl,resp,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:baseUrl='https://raw.githubusercontent.com/Clavicus/Testing-Requests/master/canadian-provinces.json';_context3.next=3;return fetch(baseUrl);case 3:resp=_context3.sent;data=resp.json();return _context3.abrupt(\"return\",data);case 6:case\"end\":return _context3.stop();}}},_callee3);}));function additionalData(){return _additionalData.apply(this,arguments);}return additionalData;}()},{key:\"getLeaderboard\",value:function(){var _getLeaderboard=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(cur_date,option){var date,PR_CODES,baseUrl,promises,i;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:date=this.getFormattedDate(cur_date,option);// console.log(date);\nPR_CODES=['AB','BC','MB','NB','NL','NT','NU','NS','ON','PE','QC','SK','YT'];baseUrl='';promises=[];// iterate through all the provinces and territories\nfor(i=0;i<PR_CODES.length;i++){// if date is single (no range)\nif(!Array.isArray(date)){baseUrl=\"https://api.opencovid.ca/timeseries?stat=cases&loc=\".concat(PR_CODES[i],\"&date=\").concat(date);}else if(Array.isArray(date)){baseUrl=\"https://api.opencovid.ca/timeseries?stat=cases&loc=\".concat(PR_CODES[i],\"&before=\").concat(date[0],\"&after=\").concat(date[1]);}else{console.log(\"DATE INVALID\");}promises.push(fetch(baseUrl));}return _context4.abrupt(\"return\",Promise.all(promises));case 6:case\"end\":return _context4.stop();}}},_callee4,this);}));function getLeaderboard(_x6,_x7){return _getLeaderboard.apply(this,arguments);}return getLeaderboard;}()}]);return ProvinceInformation;}();export default ProvinceInformation;","map":{"version":3,"sources":["/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/components/Super/classes/ProvinceInformation.js"],"names":["moment","ProvinceInformation","province","prevProvince","date","getProvinceCode","getFormattedDate","curDate","option","last7","Date","format","setDate","getDate","getFormattedDateDisplay","_province","_prevProvince","_date","Array","isArray","cur_date","loc","getCovid","covidInfo","additionalData","provArray","map","x","short","provInfo","myDate","displayDate","baseUrl","fetch","response","data","json","resp","PR_CODES","promises","i","length","console","log","push","Promise","all"],"mappings":"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","sourcesContent":["import moment from 'moment';\n\n\nclass ProvinceInformation {\n    constructor (province,prevProvince,date) {\n        this._province = province;\n        this._prevProvince = prevProvince;\n        this._date = date;\n    }\n\n\n\n\ngetProvinceCode = (province) => {\n    switch (province){\n        case 'alberta': return 'AB';\n        case 'british-columbia': return 'BC';\n        case 'manitoba': return 'MB';\n        case 'new-brunswick': return 'NB';\n        case 'new-foundland-and-labrador': return 'NL';\n        case 'northwest-territories': return 'NT';\n        case 'nunavut': return 'NU';\n        case 'nova-scotia': return 'NS';\n        case 'ontario': return 'ON';\n        case 'pei': return 'PE';\n        case 'quebec': return 'QC';\n        case 'saskatchewan': return 'SK';\n        case 'yukon': return 'YT';\n        default: return 'RP';\n    }\n}\n\n\n\n// this format is used for the api fetch\ngetFormattedDate = (curDate,option) => {\n  \n\n\n\n    let last7 = new Date(curDate);\n    switch (option) {\n        case 'daily': return moment(curDate).format('DD-MM-YYYY');\n        case 'weekly': last7.setDate(last7.getDate() -7); return [moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];\n        case 'monthly': last7.setDate(last7.getDate() -30); return [moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];\n        default: return curDate;\n    }\n    \n}\n// this format is used for display purposes \ngetFormattedDateDisplay =(curDate,option) => {\n    let last7 = new Date(curDate);\n    switch (option) {\n        case 'daily': return moment(curDate).format('MMM Do YYYY');\n        case 'weekly': last7.setDate(last7.getDate() -7); return [moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];\n        case 'monthly': last7.setDate(last7.getDate() -30); return [moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];\n        default: return curDate;\n    }\n\n}\n\ndisplayDate(date) {\n   if(Array.isArray(date)) {\n        return `${date[1]} to ${date[0]}`;\n    }\n        return date;\n}\n\n\n\n\nasync getData(province,cur_date,option) {\n    // transform input to formatted to be inserted to async fetch\nlet loc = this.getProvinceCode(province);\nlet date = this.getFormattedDate(cur_date,option);\nlet covidInfo; \nlet provArray;\ncovidInfo = await this.getCovid(loc,date,option);\nprovArray = await this.additionalData();\n\n\nlet provInfo;\nprovArray.map(x => {if (x.short === loc) {provInfo = x;}})\n\nvar myDate = '';\nmyDate = this.displayDate(this.getFormattedDateDisplay(cur_date,option));\n\n\nreturn {covidInfo,provInfo,myDate};\n}\n\n\n async getCovid(loc,date) {\n    //  if I have range\n    let baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&date=${date}`;\n    if(Array.isArray(date)) {\n        baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&before=${date[0]}&after=${date[1]}`\n    }\n    let response = await fetch(baseUrl);\n    let data = response.json();\n    return data;\n }\n async additionalData() {\n    let baseUrl = 'https://raw.githubusercontent.com/Clavicus/Testing-Requests/master/canadian-provinces.json';\n    const resp = await fetch (baseUrl);\n    const data = resp.json();\n    return data;\n}\n async getLeaderboard(cur_date,option) {\n    var date = this.getFormattedDate(cur_date,option);\n    // console.log(date);\n    var PR_CODES=['AB','BC','MB','NB','NL','NT','NU','NS','ON','PE','QC','SK','YT'];\n    var baseUrl='';\n    let promises = [];\n    // iterate through all the provinces and territories\n    for (let i =0; i<PR_CODES.length; i++) {\n\n        // if date is single (no range)\n        if (!Array.isArray(date)) {\n          \n            baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&date=${date}`;\n            \n      \n        }else if (Array.isArray(date)){\n            baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&before=${date[0]}&after=${date[1]}`;\n        } else {console.log(\"DATE INVALID\")}\n\n         promises.push(fetch(baseUrl));\n    }\n    \n    return Promise.all(promises);\n\n   \n}\n\n}\n\nexport default ProvinceInformation;\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}