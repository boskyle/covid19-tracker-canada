{"ast":null,"code":"import moment from 'moment';\n\nclass ProvinceInformation {\n  constructor(_province, prevProvince, date) {\n    this.getProvinceCode = province => {\n      switch (province) {\n        case 'alberta':\n          return 'AB';\n\n        case 'british-columbia':\n          return 'BC';\n\n        case 'manitoba':\n          return 'MB';\n\n        case 'new-brunswick':\n          return 'NB';\n\n        case 'new-foundland-and-labrador':\n          return 'NL';\n\n        case 'northwest-territories':\n          return 'NT';\n\n        case 'nunavut':\n          return 'NU';\n\n        case 'nova-scotia':\n          return 'NS';\n\n        case 'ontario':\n          return 'ON';\n\n        case 'pei':\n          return 'PE';\n\n        case 'quebec':\n          return 'QC';\n\n        case 'saskatchewan':\n          return 'SK';\n\n        case 'yukon':\n          return 'YT';\n\n        default:\n          return 'RP';\n      }\n    };\n\n    this.getFormattedDate = (curDate, option) => {\n      let last7 = new Date(curDate);\n\n      switch (option) {\n        case 'daily':\n          return moment(curDate).format('DD-MM-YYYY');\n\n        case 'weekly':\n          last7.setDate(last7.getDate() - 7);\n          return [moment(curDate).format('DD-MM-YYYY'), moment(last7).format('DD-MM-YYYY')];\n\n        case 'monthly':\n          last7.setDate(last7.getDate() - 30);\n          return [moment(curDate).format('DD-MM-YYYY'), moment(last7).format('DD-MM-YYYY')];\n\n        default:\n          return curDate;\n      }\n    };\n\n    this.getFormattedDateDisplay = (curDate, option) => {\n      let last7 = new Date(curDate);\n\n      switch (option) {\n        case 'daily':\n          return moment(curDate).format('MMM Do YYYY');\n\n        case 'weekly':\n          last7.setDate(last7.getDate() - 7);\n          return [moment(curDate).format('MMM Do YYYY'), moment(last7).format('MMM Do YYYY')];\n\n        case 'monthly':\n          last7.setDate(last7.getDate() - 30);\n          return [moment(curDate).format('MMM Do YYYY'), moment(last7).format('MMM Do YYYY')];\n\n        default:\n          return curDate;\n      }\n    };\n\n    this._province = _province;\n    this._prevProvince = prevProvince;\n    this._date = date;\n  }\n\n  displayDate(date) {\n    if (Array.isArray(date)) {\n      return `${date[1]} to ${date[0]}`;\n    }\n\n    return date;\n  }\n\n  async getData(province, cur_date, option) {\n    // transform input to formatted to be inserted to async fetch\n    let loc = this.getProvinceCode(province);\n    let date = this.getFormattedDate(cur_date, option);\n    let covidInfo;\n    let provArray;\n    covidInfo = await this.getCovid(loc, date, option);\n    provArray = await this.additionalData();\n    let provInfo;\n    provArray.map(x => {\n      if (x.short === loc) {\n        provInfo = x;\n      }\n    });\n    var myDate = '';\n    myDate = this.displayDate(this.getFormattedDateDisplay(cur_date, option));\n    return {\n      covidInfo,\n      provInfo,\n      myDate\n    };\n  }\n\n  async getCovid(loc, date) {\n    //  if I have range\n    let baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&date=${date}`;\n\n    if (Array.isArray(date)) {\n      baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&before=${date[0]}&after=${date[1]}`;\n    }\n\n    let response = await fetch(baseUrl);\n    let data = response.json();\n    return data;\n  }\n\n  async additionalData() {\n    let baseUrl = 'https://raw.githubusercontent.com/Clavicus/Testing-Requests/master/canadian-provinces.json';\n    const resp = await fetch(baseUrl);\n    const data = resp.json();\n    return data;\n  }\n\n  async getLeaderboard(cur_date, option) {\n    var date = this.getFormattedDate(cur_date, option); // console.log(date);\n\n    var PR_CODES = ['AB', 'BC', 'MB', 'NB', 'NL', 'NT', 'NU', 'NS', 'ON', 'PE', 'QC', 'SK', 'YT'];\n    var baseUrl = '';\n    let promises = []; // iterate through all the provinces and territories\n\n    for (let i = 0; i < PR_CODES.length; i++) {\n      // if date is single (no range)\n      if (!Array.isArray(date)) {\n        baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&date=${date}`;\n      } else if (Array.isArray(date)) {\n        baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&before=${date[0]}&after=${date[1]}`;\n      } else {\n        console.log(\"DATE INVALID\");\n      }\n\n      promises.push(fetch(baseUrl));\n    }\n\n    return Promise.all(promises);\n  }\n\n}\n\nexport default ProvinceInformation;","map":{"version":3,"sources":["/srv/http/boskyle.com/public_html/projects/covid19-tracker-canada/src/components/Super/classes/ProvinceInformation.js"],"names":["moment","ProvinceInformation","constructor","province","prevProvince","date","getProvinceCode","getFormattedDate","curDate","option","last7","Date","format","setDate","getDate","getFormattedDateDisplay","_province","_prevProvince","_date","displayDate","Array","isArray","getData","cur_date","loc","covidInfo","provArray","getCovid","additionalData","provInfo","map","x","short","myDate","baseUrl","response","fetch","data","json","resp","getLeaderboard","PR_CODES","promises","i","length","console","log","push","Promise","all"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAGA,MAAMC,mBAAN,CAA0B;AACtBC,EAAAA,WAAW,CAAEC,SAAF,EAAWC,YAAX,EAAwBC,IAAxB,EAA8B;AAAA,SAS7CC,eAT6C,GAS1BH,QAAD,IAAc;AAC5B,cAAQA,QAAR;AACI,aAAK,SAAL;AAAgB,iBAAO,IAAP;;AAChB,aAAK,kBAAL;AAAyB,iBAAO,IAAP;;AACzB,aAAK,UAAL;AAAiB,iBAAO,IAAP;;AACjB,aAAK,eAAL;AAAsB,iBAAO,IAAP;;AACtB,aAAK,4BAAL;AAAmC,iBAAO,IAAP;;AACnC,aAAK,uBAAL;AAA8B,iBAAO,IAAP;;AAC9B,aAAK,SAAL;AAAgB,iBAAO,IAAP;;AAChB,aAAK,aAAL;AAAoB,iBAAO,IAAP;;AACpB,aAAK,SAAL;AAAgB,iBAAO,IAAP;;AAChB,aAAK,KAAL;AAAY,iBAAO,IAAP;;AACZ,aAAK,QAAL;AAAe,iBAAO,IAAP;;AACf,aAAK,cAAL;AAAqB,iBAAO,IAAP;;AACrB,aAAK,OAAL;AAAc,iBAAO,IAAP;;AACd;AAAS,iBAAO,IAAP;AAdb;AAgBH,KA1B4C;;AAAA,SA+B7CI,gBA/B6C,GA+B1B,CAACC,OAAD,EAASC,MAAT,KAAoB;AAKnC,UAAIC,KAAK,GAAG,IAAIC,IAAJ,CAASH,OAAT,CAAZ;;AACA,cAAQC,MAAR;AACI,aAAK,OAAL;AAAc,iBAAOT,MAAM,CAACQ,OAAD,CAAN,CAAgBI,MAAhB,CAAuB,YAAvB,CAAP;;AACd,aAAK,QAAL;AAAeF,UAAAA,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,OAAN,KAAiB,CAA/B;AAAmC,iBAAO,CAACd,MAAM,CAACQ,OAAD,CAAN,CAAgBI,MAAhB,CAAuB,YAAvB,CAAD,EAAsCZ,MAAM,CAACU,KAAD,CAAN,CAAcE,MAAd,CAAqB,YAArB,CAAtC,CAAP;;AAClD,aAAK,SAAL;AAAgBF,UAAAA,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,OAAN,KAAiB,EAA/B;AAAoC,iBAAO,CAACd,MAAM,CAACQ,OAAD,CAAN,CAAgBI,MAAhB,CAAuB,YAAvB,CAAD,EAAsCZ,MAAM,CAACU,KAAD,CAAN,CAAcE,MAAd,CAAqB,YAArB,CAAtC,CAAP;;AACpD;AAAS,iBAAOJ,OAAP;AAJb;AAOH,KA5C4C;;AAAA,SA8C7CO,uBA9C6C,GA8CpB,CAACP,OAAD,EAASC,MAAT,KAAoB;AACzC,UAAIC,KAAK,GAAG,IAAIC,IAAJ,CAASH,OAAT,CAAZ;;AACA,cAAQC,MAAR;AACI,aAAK,OAAL;AAAc,iBAAOT,MAAM,CAACQ,OAAD,CAAN,CAAgBI,MAAhB,CAAuB,aAAvB,CAAP;;AACd,aAAK,QAAL;AAAeF,UAAAA,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,OAAN,KAAiB,CAA/B;AAAmC,iBAAO,CAACd,MAAM,CAACQ,OAAD,CAAN,CAAgBI,MAAhB,CAAuB,aAAvB,CAAD,EAAuCZ,MAAM,CAACU,KAAD,CAAN,CAAcE,MAAd,CAAqB,aAArB,CAAvC,CAAP;;AAClD,aAAK,SAAL;AAAgBF,UAAAA,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,OAAN,KAAiB,EAA/B;AAAoC,iBAAO,CAACd,MAAM,CAACQ,OAAD,CAAN,CAAgBI,MAAhB,CAAuB,aAAvB,CAAD,EAAuCZ,MAAM,CAACU,KAAD,CAAN,CAAcE,MAAd,CAAqB,aAArB,CAAvC,CAAP;;AACpD;AAAS,iBAAOJ,OAAP;AAJb;AAOH,KAvD4C;;AACrC,SAAKQ,SAAL,GAAiBb,SAAjB;AACA,SAAKc,aAAL,GAAqBb,YAArB;AACA,SAAKc,KAAL,GAAab,IAAb;AACH;;AAqDLc,EAAAA,WAAW,CAACd,IAAD,EAAO;AACf,QAAGe,KAAK,CAACC,OAAN,CAAchB,IAAd,CAAH,EAAwB;AACnB,aAAQ,GAAEA,IAAI,CAAC,CAAD,CAAI,OAAMA,IAAI,CAAC,CAAD,CAAI,EAAhC;AACH;;AACG,WAAOA,IAAP;AACP;;AAKY,QAAPiB,OAAO,CAACnB,QAAD,EAAUoB,QAAV,EAAmBd,MAAnB,EAA2B;AACpC;AACJ,QAAIe,GAAG,GAAG,KAAKlB,eAAL,CAAqBH,QAArB,CAAV;AACA,QAAIE,IAAI,GAAG,KAAKE,gBAAL,CAAsBgB,QAAtB,EAA+Bd,MAA/B,CAAX;AACA,QAAIgB,SAAJ;AACA,QAAIC,SAAJ;AACAD,IAAAA,SAAS,GAAG,MAAM,KAAKE,QAAL,CAAcH,GAAd,EAAkBnB,IAAlB,EAAuBI,MAAvB,CAAlB;AACAiB,IAAAA,SAAS,GAAG,MAAM,KAAKE,cAAL,EAAlB;AAGA,QAAIC,QAAJ;AACAH,IAAAA,SAAS,CAACI,GAAV,CAAcC,CAAC,IAAI;AAAC,UAAIA,CAAC,CAACC,KAAF,KAAYR,GAAhB,EAAqB;AAACK,QAAAA,QAAQ,GAAGE,CAAX;AAAc;AAAC,KAAzD;AAEA,QAAIE,MAAM,GAAG,EAAb;AACAA,IAAAA,MAAM,GAAG,KAAKd,WAAL,CAAiB,KAAKJ,uBAAL,CAA6BQ,QAA7B,EAAsCd,MAAtC,CAAjB,CAAT;AAGA,WAAO;AAACgB,MAAAA,SAAD;AAAWI,MAAAA,QAAX;AAAoBI,MAAAA;AAApB,KAAP;AACC;;AAGc,QAARN,QAAQ,CAACH,GAAD,EAAKnB,IAAL,EAAW;AACtB;AACA,QAAI6B,OAAO,GAAI,sDAAqDV,GAAI,SAAQnB,IAAK,EAArF;;AACA,QAAGe,KAAK,CAACC,OAAN,CAAchB,IAAd,CAAH,EAAwB;AACpB6B,MAAAA,OAAO,GAAI,sDAAqDV,GAAI,WAAUnB,IAAI,CAAC,CAAD,CAAI,UAASA,IAAI,CAAC,CAAD,CAAI,EAAvG;AACH;;AACD,QAAI8B,QAAQ,GAAG,MAAMC,KAAK,CAACF,OAAD,CAA1B;AACA,QAAIG,IAAI,GAAGF,QAAQ,CAACG,IAAT,EAAX;AACA,WAAOD,IAAP;AACF;;AACmB,QAAdT,cAAc,GAAG;AACpB,QAAIM,OAAO,GAAG,4FAAd;AACA,UAAMK,IAAI,GAAG,MAAMH,KAAK,CAAEF,OAAF,CAAxB;AACA,UAAMG,IAAI,GAAGE,IAAI,CAACD,IAAL,EAAb;AACA,WAAOD,IAAP;AACH;;AACoB,QAAdG,cAAc,CAACjB,QAAD,EAAUd,MAAV,EAAkB;AACnC,QAAIJ,IAAI,GAAG,KAAKE,gBAAL,CAAsBgB,QAAtB,EAA+Bd,MAA/B,CAAX,CADmC,CAEnC;;AACA,QAAIgC,QAAQ,GAAC,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,EAA8C,IAA9C,EAAmD,IAAnD,EAAwD,IAAxD,EAA6D,IAA7D,CAAb;AACA,QAAIP,OAAO,GAAC,EAAZ;AACA,QAAIQ,QAAQ,GAAG,EAAf,CALmC,CAMnC;;AACA,SAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,GAACF,QAAQ,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAEnC;AACA,UAAI,CAACvB,KAAK,CAACC,OAAN,CAAchB,IAAd,CAAL,EAA0B;AAEtB6B,QAAAA,OAAO,GAAI,sDAAqDO,QAAQ,CAACE,CAAD,CAAI,SAAQtC,IAAK,EAAzF;AAGH,OALD,MAKM,IAAIe,KAAK,CAACC,OAAN,CAAchB,IAAd,CAAJ,EAAwB;AAC1B6B,QAAAA,OAAO,GAAI,sDAAqDO,QAAQ,CAACE,CAAD,CAAI,WAAUtC,IAAI,CAAC,CAAD,CAAI,UAASA,IAAI,CAAC,CAAD,CAAI,EAA/G;AACH,OAFK,MAEC;AAACwC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAA4B;;AAEnCJ,MAAAA,QAAQ,CAACK,IAAT,CAAcX,KAAK,CAACF,OAAD,CAAnB;AACJ;;AAED,WAAOc,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAP;AAGH;;AAlIyB;;AAsI1B,eAAezC,mBAAf","sourcesContent":["import moment from 'moment';\n\n\nclass ProvinceInformation {\n    constructor (province,prevProvince,date) {\n        this._province = province;\n        this._prevProvince = prevProvince;\n        this._date = date;\n    }\n\n\n\n\ngetProvinceCode = (province) => {\n    switch (province){\n        case 'alberta': return 'AB';\n        case 'british-columbia': return 'BC';\n        case 'manitoba': return 'MB';\n        case 'new-brunswick': return 'NB';\n        case 'new-foundland-and-labrador': return 'NL';\n        case 'northwest-territories': return 'NT';\n        case 'nunavut': return 'NU';\n        case 'nova-scotia': return 'NS';\n        case 'ontario': return 'ON';\n        case 'pei': return 'PE';\n        case 'quebec': return 'QC';\n        case 'saskatchewan': return 'SK';\n        case 'yukon': return 'YT';\n        default: return 'RP';\n    }\n}\n\n\n\n// this format is used for the api fetch\ngetFormattedDate = (curDate,option) => {\n  \n\n\n\n    let last7 = new Date(curDate);\n    switch (option) {\n        case 'daily': return moment(curDate).format('DD-MM-YYYY');\n        case 'weekly': last7.setDate(last7.getDate() -7); return [moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];\n        case 'monthly': last7.setDate(last7.getDate() -30); return [moment(curDate).format('DD-MM-YYYY'),moment(last7).format('DD-MM-YYYY')];\n        default: return curDate;\n    }\n    \n}\n// this format is used for display purposes \ngetFormattedDateDisplay =(curDate,option) => {\n    let last7 = new Date(curDate);\n    switch (option) {\n        case 'daily': return moment(curDate).format('MMM Do YYYY');\n        case 'weekly': last7.setDate(last7.getDate() -7); return [moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];\n        case 'monthly': last7.setDate(last7.getDate() -30); return [moment(curDate).format('MMM Do YYYY'),moment(last7).format('MMM Do YYYY')];\n        default: return curDate;\n    }\n\n}\n\ndisplayDate(date) {\n   if(Array.isArray(date)) {\n        return `${date[1]} to ${date[0]}`;\n    }\n        return date;\n}\n\n\n\n\nasync getData(province,cur_date,option) {\n    // transform input to formatted to be inserted to async fetch\nlet loc = this.getProvinceCode(province);\nlet date = this.getFormattedDate(cur_date,option);\nlet covidInfo; \nlet provArray;\ncovidInfo = await this.getCovid(loc,date,option);\nprovArray = await this.additionalData();\n\n\nlet provInfo;\nprovArray.map(x => {if (x.short === loc) {provInfo = x;}})\n\nvar myDate = '';\nmyDate = this.displayDate(this.getFormattedDateDisplay(cur_date,option));\n\n\nreturn {covidInfo,provInfo,myDate};\n}\n\n\n async getCovid(loc,date) {\n    //  if I have range\n    let baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&date=${date}`;\n    if(Array.isArray(date)) {\n        baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${loc}&before=${date[0]}&after=${date[1]}`\n    }\n    let response = await fetch(baseUrl);\n    let data = response.json();\n    return data;\n }\n async additionalData() {\n    let baseUrl = 'https://raw.githubusercontent.com/Clavicus/Testing-Requests/master/canadian-provinces.json';\n    const resp = await fetch (baseUrl);\n    const data = resp.json();\n    return data;\n}\n async getLeaderboard(cur_date,option) {\n    var date = this.getFormattedDate(cur_date,option);\n    // console.log(date);\n    var PR_CODES=['AB','BC','MB','NB','NL','NT','NU','NS','ON','PE','QC','SK','YT'];\n    var baseUrl='';\n    let promises = [];\n    // iterate through all the provinces and territories\n    for (let i =0; i<PR_CODES.length; i++) {\n\n        // if date is single (no range)\n        if (!Array.isArray(date)) {\n          \n            baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&date=${date}`;\n            \n      \n        }else if (Array.isArray(date)){\n            baseUrl = `https://api.opencovid.ca/timeseries?stat=cases&loc=${PR_CODES[i]}&before=${date[0]}&after=${date[1]}`;\n        } else {console.log(\"DATE INVALID\")}\n\n         promises.push(fetch(baseUrl));\n    }\n    \n    return Promise.all(promises);\n\n   \n}\n\n}\n\nexport default ProvinceInformation;\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}